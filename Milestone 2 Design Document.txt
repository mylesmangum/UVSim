Milestone 2 Design Document
CS-2450
Group D
5/27/25
Project Overview
UVSim is a command‑line Java program that behaves like a 100‑word, accumulator‑based machine. It loads a text file containing four digit BasicML instructions into main memory, then fetches, decodes, and executes each instruction.
Every subsystem (memory, CPU loop, loader, console) lives in its own class, and all numeric limits are checked with appropriate error messages.

Memory Class
A thin wrapper around a fixed integer array of 100 words.
Holds int[] cells = new int[100].
Provides read(int addr) and write(int addr, int word) that first verify 0 ≤ addr ≤ 99. Otherwise throw an exception.

UVCpu Class
Holds the processor state and the fetch, decode, execute loop.
Fields: int pc (program counter), int acc (accumulator), boolean halted, and a reference to both  a Memory and a Console instance.
void run() keeps looping until halted is true, calling fetch() and decode().


User Stories
As a CS student, I want to run my BasicML program inside UVSim so that I can debug my homework quickly by watching how each instruction affects the accumulator and memory.

As teacher, I want to get a clear descriptive error message when a student’s program crashes so that I can give equally clear and descriptive feedback on their assignments.







Use Cases
1.  Load Program File
Actor: Student at the keyboard
System: ProgramLoader + Memory
Goal: Populate memory locations 00‑NN with the words from the selected text file.
Prompt user for filename.
Open file and read each line.
Convert each line to an int word; ignore blank lines and comments.
Write the word into the next memory cell.
Close the file; return success or error (file not found etc.).
2.  Validate Memory Address
Actor: Memory class internals
System: Memory bounds checker
Goal: Prevent illegal access outside 0‑99.
Receive a read(addr) or write(addr,val) request.
If addr < 0 or > 99, throw exception.
Otherwise continue with the read or write.
3.  Fetch Instruction
Actor: CPU fetch‑decode‑execute loop
System: UVCpu
Goal: Retrieve the next instruction word for decoding.
Read memory at programCounter.
Split the four digit word into opcode (first 2) and operand (last 2).
Increment programCounter to point to the subsequent cell.
4.  WRITE (11)
Actor: CPU
System: Console handler
Goal: Display a word from memory.
Fetch value from operand address.
Print value with sign and leading zeros.
5.  LOAD (20)
Actor: CPU
System: Register logic
Goal: Move a word from memory into the accumulator.
Fetch value at operand address.
Copy value into accumulator register.
6.  STORE (21)
Actor: CPU
System: Register logic
Goal: Save the accumulator back to memory.
Read current accumulator.
Write it to operand address in memory.
7.  ADD (30)
Actor: CPU arithmetic unit
System: ALU emulation
Goal: Update accumulator with addition.
Fetch operand value.
Compute acc = acc + operand.
If |acc| > 9999, flag overflow, print error, HALT.
Otherwise storethe result in accumulator.
8.  SUBTRACT (31)
Actor: CPU arithmetic unit
System: ALU emulation
Goal: Update accumulator with subtraction.
Fetch operand value.
Compute acc = acc - operand.
If |acc| > 9999, flag overflow, print error, HALT.
Otherwise storethe result in accumulator.
9.  DIVIDE (32)
Actor: CPU arithmetic unit
System: ALU emulation
Goal: Divide accumulator by operand.
Fetch operand value.
If operand == 0, print divide by zero error, HALT.
Else compute integer division, store in accumulator.


10.  MULTIPLY (33)
Actor: CPU arithmetic unit
System: ALU emulation
Goal: Multiply accumulator by a word from memory.
Fetch operand value from memory.
Compute acc = acc * operand.
If |acc| > 9999, flag overflow, print an error, and HALT.
Otherwise, store the result in the accumulator.

11. BRANCH (40)
Actor: CPU control unit
System: Program counter manager
Goal: Unconditionally alter sequential flow.
Set programCounter = operand.
12. BRANCHNEG (41)
Actor: CPU control unit
System: Program counter manager
Goal: Alter sequential flow if accumulator is negative.
If acc < 0, set programCounter = operand; else continue sequentially.
13. BRANCHZERO (42)
Actor: CPU control unit
System: Program counter manager
Goal: Alter sequential flow if accumulator is zero.
If acc == 0, set programCounter = operand; else continue sequentially.

14.  HALT (43)
Actor: CPU loop
System: UVCpu
Goal: End program execution cleanly.
Detect opcode 43.
Print "Program halted normally."
Break out of main loop and exit to OS.


